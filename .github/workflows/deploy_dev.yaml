name: Deploy to Development

on:
  push:
    branches:
      - "main"

env:
  AWS_REGION: us-east-1                 
  ECR_REPOSITORY: lks-voting-image
  ENV: "dev"

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Image Development
    runs-on: ubuntu-latest
    environment: Development
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        WORKER_IMAGE_TAG: worker-${{ env.ENV }}-latest
        VOTE_IMAGE_TAG: vote-${{ env.ENV }}-latest
        RESULT_IMAGE_TAG: result-${{ env.ENV }}-latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG --build-arg aws_region=${{ env.AWS_REGION }} --build-arg copy_or_mount="copy" -f worker/Dockerfile ./worker
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG --build-arg aws_region=${{ env.AWS_REGION }} --build-arg copy_or_mount="copy" -f worker/Dockerfile ./vote
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG --build-arg aws_region=${{ env.AWS_REGION }} --build-arg copy_or_mount="copy" -f worker/Dockerfile ./result
        docker push $ECR_REGISTRY/{{ env.$ECR_REPOSITORY }}:$WORKER_IMAGE_TAG
        docker push $ECR_REGISTRY/{{ env.$ECR_REPOSITORY }}:$VOTE_IMAGE_TAG
        docker push $ECR_REGISTRY/{{ env.$ECR_REPOSITORY }}:$RESULT_IMAGE_TAG
        echo "::set-output name=worker_image::$ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG"

    - name: End Build
      run: echo "Build Success"


  master:
      name: Pull Image on master
      environment: Development
      runs-on: voting-app
      needs: build
      steps:
        - name: Update runner's docker Version, as worker module requires it
          run: |
            docker --version

        - name: Checkout
          uses: actions/checkout@v3

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: ${{ env.AWS_REGION }}
            
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
    
        - name: Pull image
          id: pull-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: lks-voting-image
            WORKER_IMAGE_TAG: worker-${{ env.ENV }}-latest
            VOTE_IMAGE_TAG: vote-${{ env.ENV }}-latest
            RESULT_IMAGE_TAG: result-${{ env.ENV }}-latest
          # Build docker images for vote module and push it to ECR so that it can be deployed to EKS
          run: |
            docker pull $ECR_REGISTRY/${{ env.$ECR.REGISTRY }}:$WORKER_IMAGE_TAG
            docker pull $ECR_REGISTRY/${{ env.$ECR.REGISTRY }}:$VOTE_IMAGE_TAG
            docker pull $ECR_REGISTRY/${{ env.$ECR.REGISTRY }}:$RESULT_IMAGE_TAG

  node1:
      needs: build
      environment: Development
      name: Pull Image on node 1
      runs-on: node-voting-app-1
      steps:
        - name: Update runner's docker Version, as worker module requires it
          run: |
            docker --version

        - name: Checkout
          uses: actions/checkout@v3

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: ${{ env.AWS_REGION }}
            
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
    
        - name: Pull image
          id: pull-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: lks-voting-image
            WORKER_IMAGE_TAG: worker-${{ env.ENV }}-latest
            VOTE_IMAGE_TAG: vote-${{ env.ENV }}-latest
            RESULT_IMAGE_TAG: result-${{ env.ENV }}-latest
          # Build docker images for vote module and push it to ECR so that it can be deployed to EKS
          run: |
            docker pull $ECR_REGISTRY/${{ env.$ECR.REGISTRY }}:$WORKER_IMAGE_TAG
            docker pull $ECR_REGISTRY/${{ env.$ECR.REGISTRY }}:$VOTE_IMAGE_TAG
            docker pull $ECR_REGISTRY/${{ env.$ECR.REGISTRY }}:$RESULT_IMAGE_TAG

  node2:
      needs: build
      environment: Development
      name: Pull Image on node 2
      runs-on: node-voting-app-2
      steps:
        - name: Update runner's docker Version, as worker module requires it
          run: |
            docker --version

        - name: Checkout
          uses: actions/checkout@v3

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: ${{ env.AWS_REGION }}
            
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
    
        - name: Pull image
          id: pull-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: lks-voting-image
            WORKER_IMAGE_TAG: worker-${{ env.ENV }}-latest
            VOTE_IMAGE_TAG: vote-${{ env.ENV }}-latest
            RESULT_IMAGE_TAG: result-${{ env.ENV }}-latest
          # Build docker images for vote module and push it to ECR so that it can be deployed to EKS
          run: |
            docker pull $ECR_REGISTRY/${{ env.$ECR.REGISTRY }}:$WORKER_IMAGE_TAG
            docker pull $ECR_REGISTRY/${{ env.$ECR.REGISTRY }}:$VOTE_IMAGE_TAG
            docker pull $ECR_REGISTRY/${{ env.$ECR.REGISTRY }}:$RESULT_IMAGE_TAG

  deploy:  
    name: Deploy Application into docker swarm
    runs-on: main
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy application images to Docker Swarm
        run: |
          docker stack deploy --compose-file docker-stack.yml stackdemo
